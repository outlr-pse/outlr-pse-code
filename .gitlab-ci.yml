stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
#
#services:
#  - docker:dind


#build:docker:
#  image: docker:20-dind
#  variables:
#    # using "docker" as the host is only possible if you alias the service below
#    DOCKER_HOST: tcp://docker:2375
#    # could be wrong here but although Docker defaults to overlay2,
#    # Docker-in-Docker (DIND) does not according to the following GitLab doc:
#    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  services:
#    - name: docker:20-dind
#      alias: docker
#      # in our experience although you'd assume this would be sufficient, this did
#      # nothing to prevent connection errors without `DOCKER_TLS_CERTDIR` being set
#      # to an empty string, and I would call that beyond mildly infuriating.
#      command: ["--tls=false"]
#  script:
#    - cd frontend
#    - docker build -t testfront .
#    - docker run -p 8080:8080 --rm --name frontend testfront

setup_db:
  stage: build
  image: postgres:12.4
  services:
    - postgres:12.4
  variables:
    POSTGRES_DB: outlr
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: 12345678
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD


frontend-build:
    stage: build
    image: node:latest
    script:
        - cd frontend
        - npm install
        - npm run build

backend-test:
  image: python:3.10-bullseye
  stage: test
  services:
    - postgres:12.4
  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PYTHONPATH: "/builds/ipd-boehm/pse/ipd-pse-2022-ws/subspace-outlier-profiling/team-2/pse-implementation/:/builds/ipd-boehm/pse/ipd-pse-2022-ws/subspace-outlier-profiling/team-2/pse-implementation/backend/src/"
  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/reference/pip_install/#caching
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
    POSTGRES_DB: outlr
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: 12345678
    DB_HOST: postgres
    JWT_SECRET_KEY: secret_key
    DATABASE_URL: postgresql://postgres:12345678@postgres:5432/outlr

  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
      - python3 -V  # Print out python version for debugging
      - echo $PYTHONPATH
      - pip3 install virtualenv
      - virtualenv venv
      - source venv/bin/activate
      - pip3 install requests
      - pip3 install python-dotenv
      - cd backend
      - pip3 install -r requirements.txt
  script:
    - python3 -m unittest discover tests

frontend-test:
  stage: test
  services:
    - postgres:12.4
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  image: nikolaik/python-nodejs:python3.10-nodejs19
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PYTHONPATH: "/builds/ipd-boehm/pse/ipd-pse-2022-ws/subspace-outlier-profiling/team-2/pse-implementation/:/builds/ipd-boehm/pse/ipd-pse-2022-ws/subspace-outlier-profiling/team-2/pse-implementation/backend/src/"
    POSTGRES_DB: outlr
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: 12345678
    DB_HOST: postgres
    JWT_SECRET_KEY: secret_key
    DATABASE_URL: postgresql://postgres:12345678@postgres:5432/outlr
  before_script:
 # install Python
    - apt-get install software-properties-common
    - add-apt-repository ppa:deadsnakes/ppa
    - apt-get update
    - apt-get install -y python3.10 python3-pip
    - python3.10 -V  # Print out python version for debugging
    - python3.10 -m pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python3.10 -m pip install requests
    - python3.10 -m pip install python-dotenv
    - cd backend
    - python3.10 -m pip install -r requirements.txt
    - cd src
    - python3.10 __init__.py
    - cd ../..
  script:
    - cd frontend
    - npm install -g jest
    - npm install --save-dev jest-junit
    - npm install --save-dev ts-jest @types/jest typescript
    - jest --ci --coverage --updateSnapshot
  dependencies:
    - backend-test

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."


#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - docker run -it -p 8080:80 --rm --name outlr-web-deployed outlr-web
#    - echo "Application successfully deployed."
